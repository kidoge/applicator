#!/bin/bash

source "functions.sh"

test_echo_if_verbose_unset() {
  test -z "$(VERBOSE= echo_if_verbose test)"
}
test_echo_if_verbose_set() {
  test ! -z "$(VERBOSE=1 echo_if_verbose test)"
}

test_make_backup__file_created() {
  cat >test << EOF
  this is
  a test file
EOF
  make_backup test
  test -f test.bak
}

test_make_backup__file_same_content() {
  cat >test << EOF
  this is
  a test file
EOF
  make_backup test
  test -z "$(diff test test.bak)"
}

test_make_backup__handle_existing_backup() {
  cat >test << EOF
  this is
  a test file
EOF
  touch test.bak
  make_backup test
  test -f test.bak.0
}

test_make_backup__handle_multiple_existing_backups() {
  cat >test << EOF
  this is
  a test file
EOF
  touch test.bak
  touch test.bak.0
  touch test.bak.1
  make_backup test
  test -f test.bak.2
}

test_make_backup__handle_existing_same_backup() {
  cat >test << EOF
  this is
  a test file
EOF
  cp test test.bak
  make_backup test
  test ! -f test.bak.0
}

test_prompt_text_mentions_argument() {
  [[ "$(echo o | promptOverwriteOrMerge testText)" =~ "testText" ]]
}

test_prompt_text_contains_overwrite_merge_skip_dialog() {
  [[ "$(echo o | promptOverwriteOrMerge testText)" =~ "$PROMPT_OPTION_TEXT" ]]
}

test_overwrite_lowercase() {
  echo o | promptOverwriteOrMerge testarg
  result=$?
  [[ $result -eq $PROMPT_RESPONSE_OVERWRITE ]]
}

test_overwrite_uppercase() {
  echo O | promptOverwriteOrMerge testarg
  result=$?
  [[ $result -eq $PROMPT_RESPONSE_OVERWRITE ]]
}

test_merge_lowercase() {
  echo m | promptOverwriteOrMerge testarg
  result=$?
  [[ $result -eq $PROMPT_RESPONSE_MERGE ]]
}

test_merge_uppercase() {
  echo M | promptOverwriteOrMerge testarg
  result=$?
  [[ $result -eq $PROMPT_RESPONSE_MERGE ]]
}

test_skip_lowercase() {
  echo s | promptOverwriteOrMerge testarg
  result=$?
  [[ $result -eq $PROMPT_RESPONSE_SKIP ]]
}

test_skip_uppercase() {
  echo S | promptOverwriteOrMerge testarg
  result=$?
  [[ $result -eq $PROMPT_RESPONSE_SKIP ]]
}

test_copies_if_file_does_not_exist() {
  mkdir source
  cat >source/test << EOF
  this is
  a test file
EOF
  mkdir destination
  install_config_file source/test destination/test
  test -z "$(diff source/test destination/test 2>&1)"
}

test_nop_if_skipped() {
  mkdir source
  cat >source/test << EOF
  this is
  a test file
EOF

  mkdir destination
  cat >expected << EOF
  here is a different file
EOF
  cp expected destination/test

  echo s | install_config_file source/test destination/test
  test -z "$(diff expected destination/test 2>&1)"
}

test_replace_if_overwrite() {
  mkdir source
  cat > source/testfile << EOF
  this is the new file
EOF

  mkdir destination
  cat > destination/file << EOF
  this should not exist
EOF

  echo o | install_config_file source/testfile destination/file
  test -z "$(diff source/testfile destination/file 2>&1)"
}

test_resolve_username_as_repo() {
  local repo="$(resolve_repo username)"
  [[ $repo == "https://github.com/username/applicator-config" ]]
}

test_resolve_username_and_repo() {
  local repo="$(resolve_repo test:test-config)"
  [[ $repo == "https://github.com/test/test-config" ]]
}

test_check_repo() {
  check_repo "https://github.com/applicator-test/applicator-config"
  [[ $? -eq 0 ]]
}

test_clone_repo_from_github() {
  mkdir repo
  ls repo
  clone_repo https://github.com/applicator-test/applicator-config repo
  [[ "$(cat repo/.1.conf)" == "test1" ]] &&
      [[ "$(cat repo/.2.conf)" == "test2" ]] &&
      [[ "$(cat repo/plainfile)" == "does not start with dot" ]]
}

###########################################################
# TEST RUNNER CODE
###########################################################


PASS_COUNT=0
TOTAL_COUNT=0

cleanup() {
  if [ $PASS_COUNT -eq $TOTAL_COUNT ]; then
    printf "[[ \e[1;32mALL PASSED\e[m ]]\n"
  else
    printf "[[ \e[1;31m$PASS_COUNT / $TOTAL_COUNT PASSED\e[m ]]\n"
  fi
}

trap cleanup EXIT

run_test() {
  SANDBOX=$(mktemp -d)
  pushd $SANDBOX &>/dev/null
  if [ -z "$VERBOSE" ]; then
    $1 &>/dev/null
  else
    $1
  fi
  result=$?
  popd &>/dev/null

  if [ $result -eq 0 ]; then
    rm -rf $SANDBOX
    result="\e[0;32mPASS\e[m"
    let "PASS_COUNT+=1"   
  else
    echo $SANDBOX
    result="\e[7;31mFAIL\e[m"
  fi
  let "TOTAL_COUNT+=1"

  printf "$result   $1\n"
}

main() {
  while :; do
    case $1 in
    -v|--verbose)
      VERBOSE=1
      ;;
    -*)
      die_with_help "Unknown option: $1"
      ;;
    esac
    shift

    if [ -z "$1" ]; then
      break
    fi
  done
  #find all functions with names that start with "test_", then run them
  for func_decl in $(declare -F | cut -d " " -f 3); do
    if [[ $func_decl =~ ^test_ ]]; then
      run_test "$func_decl"
    fi
  done
}

main "$@"
