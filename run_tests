#!/bin/bash

source "functions.sh"


function test_echo_if_verbose_unset() {
  test -z "$(VERBOSE= echo_if_verbose test)"
}
function test_echo_if_verbose_set() {
  test ! -z "$(VERBOSE=1 echo_if_verbose test)"
}

function test_make_backup__file_created() {
  cat >$SANDBOX/test << EOF
  this is
  a test file
EOF
  make_backup $SANDBOX/test
  test -f $SANDBOX/test.bak
}

function test_make_backup__file_same_content() {
  cat >$SANDBOX/test << EOF
  this is
  a test file
EOF
  make_backup $SANDBOX/test
  test -z "$(diff $SANDBOX/test $SANDBOX/test.bak)"
}

function test_make_backup__handle_existing_backup() {
  cat >$SANDBOX/test << EOF
  this is
  a test file
EOF
  touch $SANDBOX/test.bak
  make_backup $SANDBOX/test
  test -f $SANDBOX/test.bak.0
}

function test_make_backup__handle_multiple_existing_backups() {
  cat >$SANDBOX/test << EOF
  this is
  a test file
EOF
  touch $SANDBOX/test.bak
  touch $SANDBOX/test.bak.0
  touch $SANDBOX/test.bak.1
  make_backup $SANDBOX/test
  test -f $SANDBOX/test.bak.2
}

function test_make_backup__handle_existing_same_backup() {
  cat >$SANDBOX/test << EOF
  this is
  a test file
EOF
  cp $SANDBOX/test $SANDBOX/test.bak
  make_backup $SANDBOX/test
  test ! -f $SANDBOX/test.bak.0
}


###########################################################
# TEST RUNNER CODE
###########################################################

PASS_COUNT=0
TOTAL_COUNT=0

function cleanup() {
  if [ $PASS_COUNT -eq $TOTAL_COUNT ]; then
    echo "ALL PASSED"
  else
    echo "$PASS_COUNT / $TOTAL_COUNT PASSED"
  fi
}

trap cleanup EXIT

function run_test() {
  SANDBOX=$(mktemp -d)
  $1
  if [ $? -eq 0 ]; then
    result="\e[0;32mPASS\e[m"
    let "PASS_COUNT+=1"   
  else
    result="\e[7;31mFAIL\e[m"
  fi
  let "TOTAL_COUNT+=1"

  printf "$result   $1\n"
}

#find all functions with names that start with "test_", then run them
for func_decl in $(declare -F | cut -d " " -f 3); do
  if [[ $func_decl =~ ^test_ ]]; then
    run_test "$func_decl"
  fi
done
