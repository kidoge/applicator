#!/bin/bash

# Globbing to include hidden files (e.g. when looping through files with *)
shopt -s dotglob 

source "$(dirname "$0")/functions.sh"

function cleanup {
  if [ -e "$clone_dir" ]; then
    rm -rf "$clone_dir"
  fi
}
trap cleanup EXIT

INSTALL_DIR="${HOME}"

VERBOSE=0

show_help() {
  cat << EOF
Usage: bash applicator [OPTION]... [TARGET]...
  -h, --help, -?    show help
  -v, --verbose     verbose output
  -d                where to apply config files, defaults to home directory
EOF
  echo $help
}

FILES=()
get_input_files() {
  local input="$(readlink -f $1)"
  
  # Ignore git directories
  [[ $input =~ ".git" ]] && return

  if [ -f "$input" ]; then
    FILES+=("$input")
    return
  fi

  if [ -d "$input" ]; then
    for f in $1/*; do
      get_input_files $f
    done
  fi
}

main() {
# Handle arguments
# Taken from: http://mywiki.wooledge.org/BashFAQ/035
  while :; do
    case $1 in
    -h|-\?|--help)
      show_help
      exit 0
      ;;
    -v|--verbose)
      VERBOSE=1
      ;;
    -d)
      if [ "$2" ]; then
        INSTALL_DIR="$2"
      else
        die_with_help "\"-d\" requires a non-empty option argument"
      fi
      shift
      ;;
    --)
      shift
      break
      ;;
    -*)
      die_with_help "Unknown option: $1"
      ;;
    *)
      break
      ;;
    esac

    shift
  done

  if [ -z "$1" ]; then
    die_with_help 'TARGET must be specified for installation'
  fi

  for f in $@; do
    if [ -e "$f" ]; then
      get_input_files $f
    else 
      #check github
      local repo=$(resolve_repo $f)
      if ! check_repo $repo; then
          die "$f does not exist"
      fi
      clone_dir=$(mktemp -d /tmp/applicator.config.XXXXXX)
      clone_repo $repo $clone_dir
      local result=$?
      if [ ! $result ]; then
        die "Repository could not be cloned"
      fi

      get_input_files $clone_dir
    fi
  done

  for f in ${FILES[@]}; do
    local destination="${INSTALL_DIR}/$(basename $f)"
    install_config_file $f $destination
  done
}

main "$@"
